###############################################################################
#############################   Makefile Options   ############################
###############################################################################

################################   Variables   ################################
CC				= g++
FEXT			= .cpp
EXT				= .out

RM				= rm
RMDIR			= rm -f
MD				= mkdir

INCLUDE			= -I/usr/local/include/
LIB				= -L/usr/local/lib/

FLAGS			= -g -std=c++11
LD				= -lsfml-graphics -lsfml-window -lsfml-system

#############################   Executable List   #############################
#                              Without Extension                              #
EXECS			= bin/test.out bin/game.out

#############################   Dependency List   #############################
#       Use Format: {filename}.deps = {List of all files it depends on}       #
test.out.deps = test.o
test.deps = test.cpp

game.out.deps = game.o main.o menu.o match.o character.o 
game.deps = game.cpp game.h menu.h
main.deps = main.cpp game.h
menu.deps = Menu.cpp menu.h 
match.deps = match.cpp match.h menu.h character.h
character.deps = character.cpp character.h


###############################################################################
###########################   End Makefile Options   ##########################
###############################################################################

.PHONY:all clean 
.SUFFIXES:
.SECONDARY:

# include = $(foreach dir, $(INCLUDE), -I$(dir))
# lib = $(foreach library, $(LIB), -L$(library))
# execpaths = $(foreach name, $(EXECS), bin/$(name)$(EXT))

#################################   Recipes   #################################
all:bin obj $(EXECS)

clean:
	$(RM) bin/*$(EXT)
	$(RM) obj/*.o

bin:
	$(MD) bin

obj:
	$(MD) obj

.SECONDEXPANSION:
bin/%$(EXT):$$(foreach object, $$($$*$(EXT).deps), obj/$$(object))
	$(CC) -o $@ $(foreach object, $($*$(EXT).deps), obj/$(object)) $(LIB) $(LD)

obj/%.o:$$($$*.deps)
	$(CC) -c -o $@ $(include) $(filter %$(FEXT), $($*.deps)) $(FLAGS)
